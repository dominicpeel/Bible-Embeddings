.envimport json
import numpy as np
from sklearn.manifold import TSNE

with open('data/embeddings.json', 'r') as f:
    chapters = json.load(f)

books = []
for chapter in chapters.values():
    if chapter['book'] not in books:
        books.append(chapter['book'])

embeddings = np.array([np.array(chapter['embedding']) for chapter in chapters.values()])

tsne_3d = TSNE(n_components=3)
vis_dims_3d = tsne_3d.fit_transform(embeddings)

import plotly.graph_objs as go
import plotly.express as px

# Assuming 'vis_dims_3d' is the result of t-SNE in 3D, and 'chapters' is the dictionary with chapter information
x_3d = [x for x, y, z in vis_dims_3d]
y_3d = [y for x, y, z in vis_dims_3d]
z_3d = [z for x, y, z in vis_dims_3d]

# Create a color scale based on the book index
book_indices = {book: idx for idx, book in enumerate(books)}
colors_list = [book_indices[chapter['book']] for chapter in chapters.values()]
color_scale = px.colors.diverging.Picnic
# color_scale = px.colors.qualitative.Plotly

# Create a list of custom hover texts
hover_texts = [f"{book_chapter}: {chapters[book_chapter]['book']} {chapters[book_chapter]['chapter']}" for book_chapter in chapters.keys()]

# Create a 3D scatter plot
fig = go.Figure(data=[go.Scatter3d(
    x=x_3d,
    y=y_3d,
    z=z_3d,
    mode='markers',
    marker=dict(
        size=4,
        color=colors_list,
        colorscale=color_scale,
        showscale=True
    ),
    text=hover_texts,
    hovertemplate="%{text}<extra></extra>",
)])

fig.update_layout(
    title="Bible chapters embedded in 3D space using t-SNE",
    scene=dict(
        xaxis_title="X",
        yaxis_title="Y",
        zaxis_title="Z"
    ),
    showlegend=False
)

fig.show()

# save reduced dim embeddings to csv, include book, chapter, verses, content
# import pandas as pd

# df = pd.DataFrame.from_dict(chapters, orient='index')
# df['x'] = x_3d
# df['y'] = y_3d
# df['z'] = z_3d

# # remove embedding column
# df = df.drop(columns=['embedding'])

# #write to csv
# df.to_csv('embeddings_3d.csv', index=False)
OPENAI_API_KEY=sk-NmOopRuMbQKv4eCa0ipFT3BlbkFJJSsr038n4Ev2puV28W3vimport json
import pandas as pd

with open('data/embeddings.json', 'r') as f:
    chapters = json.load(f)

df = pd.DataFrame.from_dict(chapters, orient='index')
df.head()

#write to csv
df.to_csv('data/embeddings.csv', index=False)import re
import openai
from dotenv import load_dotenv
import os
import json
import csv
from tqdm import tqdm 

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
    
with open('data/kjv.txt', 'r') as f:
    lines = f.readlines()

chapters = {} 

for line in lines:
    line = line.strip()

    reference, content = line.split(' ', 1)
    book_chapter, verse = reference.split(':')
    book, chapter = re.match(r"(\d?[a-zA-Z]+)([0-9]+)", book_chapter).groups()

    if book_chapter not in chapters:
        chapters[book_chapter] = {
            "book": book,
            "chapter": int(chapter),
            "verses": [int(verse)],
            "content": content, 
        }
    else:
        chapters[book_chapter]["verses"].append(int(verse))
        chapters[book_chapter]["content"] += f" {content}"

print(f"Creating embeddings for {len(chapters)} chapters")
for book_chapter, chapter in tqdm(chapters.items()):
    response = openai.Embedding.create(
        input=chapter["content"],
        model="text-embedding-ada-002",
    )
    chapters[book_chapter]["embedding"] = response['data'][0]['embedding']

with open('embeddings.csv', 'w', newline='', encoding='utf-8') as csvfile:
    fieldnames = ['book_chapter', 'book', 'chapter', 'verses', 'content', 'embedding']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

    writer.writeheader()
    for book_chapter, chapter in chapters.items():
        row = {
            'book_chapter': book_chapter,
            'book': chapter['book'],
            'chapter': chapter['chapter'],
            'verses': ','.join(str(v) for v in chapter['verses']),
            'content': chapter['content'],
            'embedding': chapter['embedding'],
        }
        writer.writerow(row)

# json format
# with open('embeddings.json', 'w') as outfile:
#     json.dump(chapters, outfile, ensure_ascii=False, indent=4)

# dimensionality reduction using t-SNE
import numpy as np
import pandas as pd
from sklearn.manifold import TSNE
from sklearn.metrics.pairwise import cosine_similarity
import ast

# load data
df = pd.read_csv('data/embeddings.csv')
mat = np.array(df['embedding'].apply(ast.literal_eval).tolist())

# dimensionality reduction
tsne = TSNE(n_components=3)
red_dims = tsne.fit_transform(mat)
# create dataframe with reduced dimensions
# cols=['book', 'chapter', 'verses', 'content', 'x', 'y', 'z', 'nn']
cols=['book', 'chapter', 'verses', 'content', 'x', 'y', 'z', 'nn']
df_red = pd.DataFrame(columns=cols)

df_red['book'] = df['book']
df_red['chapter'] = df['chapter']
df_red['verses'] = df['verses']
df_red['content'] = df['content']

df_red['x'] = red_dims[:, 0]
df_red['y'] = red_dims[:, 1]

# find 5 nearest neighbors
for i in range(len(df_red)):
    sim = cosine_similarity(mat[i].reshape(1, -1), mat)
    sim = sim.reshape(-1)
    sim[i] = 0
    nn = np.argsort(sim)[-5:]
    df_red['nn'][i] = nn

df_red.head()
print(df_red['nn'][0])



